service: lambda-image-processing

frameworkVersion: ">=1.34.0 <2.0.0"

provider:
  name: aws
  profile: lambda-image-processing
  runtime: python3.7
  stage: ${opt:stage, 'dev'}
  region: us-east-1
  deploymentBucket: ${self:custom.deployment_bucket}
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - lambda:GetLayerVersion
        - lambda:PublishLayerVersion
      Resource: "*"
    - Effect: "Allow"
      Action:
        - "logs:CreateLogGroup"
        - "logs:CreateLogStream"
        - "logs:PutLogEvents"
      Resource: "arn:aws:logs:*:*:*"

functions:
  watermark:
    handler: src/watermark.main
    description: Applies sample watermark to image
    memorySize: 128
    timeout: 15
    environment:
      ENV: 'environment'
    events:
      - sns: 
        arn: ${self:custom.topic_arn}
        topicName: ${self:custom.s3_event_sns_topic}
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - lambda:GetLayerVersion
          - lambda:PublishLayerVersion
        Resource: "*"
      - Effect: "Allow"
        Action:
          - "logs:CreateLogGroup"
          - "logs:CreateLogStream"
          - "logs:PutLogEvents"
        Resource: "arn:aws:logs:*:*:*"
      - Effect: "Allow"
        Action:
          - "s3:GetObject"
          - "s3:GetObjectVersion"
          - "s3:ListBucket"
        Resource: !Join [ "", [ "arn:aws:s3:::", "${self:custom.bucket_images}", "/originals/*" ] ]
      - Effect: "Allow"
        Action:
          - "s3:PutObject"
          - "s3:ListBucket"
        Resource: !Join [ "", [ "arn:aws:s3:::", "${self:custom.bucket_images}", "/watermarks/*" ] ]
        
  thumbnail:
    handler: src/thumbnail.main
    description: Generates a thumbnail from the original image
    memorySize: 128
    timeout: 15
    environment:
      ENV: 'environment'
    events:
      - sns: 
        arn: ${self:custom.topic_arn}
        topicName: ${self:custom.s3_event_sns_topic}
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - lambda:GetLayerVersion
          - lambda:PublishLayerVersion
        Resource: "*"
      - Effect: "Allow"
        Action:
          - "logs:CreateLogGroup"
          - "logs:CreateLogStream"
          - "logs:PutLogEvents"
        Resource: "arn:aws:logs:*:*:*"
      - Effect: "Allow"
        Action:
          - "s3:GetObject"
          - "s3:GetObjectVersion"
          - "s3:ListBucket"
        Resource: !Join [ "", [ "arn:aws:s3:::", "${self:custom.bucket_images}", "/originals/*" ] ]
      - Effect: "Allow"
        Action:
          - "s3:PutObject"
          - "s3:ListBucket"
        Resource: !Join [ "", [ "arn:aws:s3:::", "${self:custom.bucket_images}", "/thumbnails/*" ] ]

  blackAndWhite:
    handler: src/black-and-white.main
    description: Generates a black and white version of the original image
    memorySize: 128
    timeout: 15
    environment:
      ENV: 'environment'
    events:
      - sns: 
        arn: !Ref S3EventSNSTopic
        topicName: ${self:custom.s3_event_sns_topic}
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - lambda:GetLayerVersion
          - lambda:PublishLayerVersion
        Resource: "*"
      - Effect: "Allow"
        Action:
          - "s3:GetObject"
          - "s3:GetObjectVersion"
          - "s3:ListBucket"
        Resource: !Join [ "", [ "arn:aws:s3:::", "${self:custom.bucket_images}", "/originals/*" ] ]
      - Effect: "Allow"
        Action:
          - "s3:PutObject"
          - "s3:ListBucket"
        Resource: !Join [ "", [ "arn:aws:s3:::", "${self:custom.bucket_images}", "/black-and-whites/*" ] ]
        
  

resources:
  Description: SNS Topics CloudFormation template generated by serverless framework
  Resources:
  
    S3EventSNSTopic:
      Type: AWS::SNS::Topic
      Properties:
        DisplayName: SNS Topic
        TopicName: ${self:custom.s3_event_sns_topic}
   
    SNSTopicPolicy:
      Type: AWS::SNS::TopicPolicy
      DependsOn: S3EventSNSTopic
      Properties:
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                AWS: "*"
              Action: sns:Publish
              Resource: !Ref S3EventSNSTopic
              Condition:
                ArnLike:
                  aws:SourceArn: ${self:custom.bucket_arn}
        Topics:
          - !Ref S3EventSNSTopic
          
    S3ImagesBucket:
      Type: AWS::S3::Bucket
      DependsOn: 
        - S3EventSNSTopic
        - SNSTopicPolicy
      Properties:
        BucketName: ${self:custom.bucket_images}
        NotificationConfiguration:
          TopicConfigurations:
            - Topic: !Ref S3EventSNSTopic
              Event: s3:ObjectCreated:Put
              Filter:
                S3Key:
                  Rules:
                    - Name: prefix
                      Value: originals/
              
              

        
    
package:
  individually: true
  exclude:
    - node_modules/**
    

custom:
  pythonRequirements:
    dockerizePip: non-linux
  stage: ${opt:stage, self:provider.stage}
  region: ${opt:region, self:provider.region}
  user_name: filipebarretto
  deployment_bucket: ${self:custom.account_id}-lambda-image-processing-deployment-bucket-${self:provider.stage}
  account_id: ${file(./customjs/custom-account-id.js):getAccountId}
  s3_event_sns_topic: ${self:service}-topic-${self:provider.stage}
  topic_arn:
    Fn::Sub: arn:aws:sns:$(self:provider.region):$(self:custom.account_id):$(self:custom.s3_event_sns_topic)
  bucket_images: ${self:service}-${self:custom.account_id}-${self:provider.stage}
  bucket_arn: 
    Fn::Sub: arn:aws:s3:::${self:custom.bucket_images}
  
  
plugins:
  - serverless-python-requirements
  - serverless-iam-roles-per-function
  - serverless-plugin-create-deployment-bucket
  - serverless-pseudo-parameters
